CREATE TABLE Combined_appleStore_descriptions AS 
SELECT * FROM appleStore_description1
UNION ALL
SELECT * FROM appleStore_description2
UNION ALL
SELECT * FROM appleStore_description3
UNION ALL
SELECT * FROM appleStore_description4


**EXPLORATORY DATA ANALYSIS**
--Check the number of unique appsAppleStore to see if there is any descrepancies

SELECT COUNT(DISTINCT id) As uniq_apps
FROM AppleStore

SELECT  COUNT(DISTINCT id) As uniq_apps
FROM Combined_appleStore_descriptions

--Check for any missing values in key fields
SELECT COUNT(*) As missing_values
FROM AppleStore
WHERE track_name is NULL or user_rating is null or prime_genre is null

SELECT COUNT(*) As missing_values
FROM Combined_appleStore_descriptions
WHERE app_desc is NULl

--Find out the number of apps per genre
SELECT prime_genre, COUNT(*) As number_of_apppergenre
FROM AppleStore
GROUP BY prime_genre
ORDER BY number_of_apppergenre DESC

--Get an overview of apps rating
SELECT
     MIN(user_rating) As min_rating,
     MAX(user_rating) As max_rating,
     AVG(user_rating) As avg_rating
from AppleStore

**DATA ANALYSIS**
--Determine whether paid apps have higher ratings from app 

SELECT CASE 
       when price >0 THEN 'Paid'
       ELSE 'Free'
       END As app_type, avg(user_rating) As avg_rating
     
FROM AppleStore
GROUP BY app_type

--check if apps with more languages have higher rating
SELECT CASE
       WHEN lang_num < 10 THEN '< 10 languages'
       WHEN lang_num  BETWEEN 10 AND 30 THEN '10-30 languages' 
       ELSE '> 30 languages'
       end As language_bucket, avg(user_rating)
FROM AppleStore
GROUP by language_bucket

--Check which genre has the highest ratingAppleStore

SELECT prime_genre, avg(user_rating) as avg_rating
FROM AppleStore
GROUP BY prime_genre
ORDER BY avg_rating aSC

--Check if ther is correlation between length of app description and user ratingAppleStore

SELECT CASE
       WHEN length(b.app_desc)< 500 THEN 'short'
       WHEN length(b.app_desc) BETWEEN 500 AND 1000 THEN 'Medium' 
       ELSE 'Long'
       end As description_bucket, avg(a.user_rating)As avg_rating 
FROM  AppleStore as a
      JOIN Combined_appleStore_descriptions as b
      on a.id = b.id
 
GROUP BY description_bucket
ORDER BY avg_rating

--Check the top rated app per genreAppleStore
SELECT
prime_genre,
user_rating,
track_name
FROM (
SELECT
     prime_genre,
     user_rating,
     track_name,
     rank() over(partition by prime_genre ORDER BY user_rating DESC, rating_count_tot DESC) as rank
FROM AppleStore) As a

WHERE a.rank=1
